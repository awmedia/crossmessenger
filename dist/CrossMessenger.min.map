{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///CrossMessenger.min.js","webpack:///webpack/bootstrap 188be289bbebe91dbe66","webpack:///./index.js","webpack:///./lib/CrossMessenger.js","webpack:///./~/eventemitter3/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_class","_temp","_initialiseProps","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","_typeof","Symbol","iterator","_createClass","defineProperties","props","descriptor","defineProperty","protoProps","staticProps","_eventemitter","_eventemitter2","CrossMessenger","_EventEmitter","_ref","undefined","config","targetFrame","_ref$targetOrigin","targetOrigin","messageScope","messageHandler","_this","getPrototypeOf","_validateConfigAndThrowOnError","_targetFrame","contentWindow","_targetOrigin","_messageScope","_messageHandler","handleMessage","_waitingForReplyList","_hasHandshake","_isDomReady","_isReady","Promise","resolve","reject","_isReadyResolver","_isReadyRejector","window","addEventListener","_handleReceive","document","readyState","setTimeout","_setDomSuccess","bind","messageOrId","messageData","baseMessage","message","replyId","send","_this2","expectReply","force","_send","then","required","forEach","property","Error","_registeredMessageScopes","indexOf","emit","_idCounter","_this3","String","result","serializedMessage","JSON","stringify","postMessage","error","_setHandshakeSuccess","_setReadyWhenReady","name","parse","data","_message","isValidMessage","isHandshake","isReply","reply","isValidReply","replyResolver","replyPayload","success","getMessage","payload","Events","EE","fn","context","once","EventEmitter","_events","_eventsCount","has","prefix","eventNames","events","names","push","slice","getOwnPropertySymbols","concat","listeners","event","exists","evt","available","l","ee","Array","a1","a2","a3","a4","a5","args","len","removeListener","apply","j","on","listener","removeAllListeners","off","addListener","setMaxListeners","prefixed"],"mappings":"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","file":"CrossMessenger.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CrossMessenger\"] = factory();\n\telse\n\t\troot[\"CrossMessenger\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CrossMessenger\"] = factory();\n\telse\n\t\troot[\"CrossMessenger\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"dist\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(1);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _class, _temp, _initialiseProps;\n\t\n\tvar _eventemitter = __webpack_require__(2);\n\t\n\tvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/*\n\tFeatures:\n\t - Queuing of messages when messenger is not ready. (The send method will send when to ready promise is resolved.)\n\t - Reply messages (useful to return data or to let the sender know that a message is processed)\n\t - Promises - when sending a message a promise will be returned\n\t - Auto serialize/unserialize messages\n\t - Message scopes to only process messages from the configured scope\n\t - Auto handshake to detect and confirm when both messenger sides are ready to send and receive messages\n\t */\n\t\n\t/**\n\t * CrossMessenger\n\t * Messenger to communicate between frames through postMessage. Messages can be replied to confirm processing or to return\n\t * data. Use the custom messageHandler to control the return value.\n\t * When sending a message, a Promise will be the return value. When the optional param \"expectReply\" is true, the Promise will be resolved after the\n\t * other side has replied the message with the reply message object as the argument. When false, the Promise will be resolved instantly.\n\t *\n\t * @param   config.targetFrame          Ref to the target element (iframe or window.parent (when in iframe)). The target element should support postMessage.\n\t * @param   config.targetOrigin         Default *\n\t * @param   config.messageScope         Scope of messages to accept. Messages from other scopes will be ignored. The scope of the sender and receiver should be equal.\n\t * @param   config.messageHandler       A class or object with a \"handleMessage\" function or a function. Params: message and messenger. The return value of the messageHandler will be used as the reply payload...\n\t *\n\t * @event   receive     When a message or a reply is received\n\t * @event   message     When a message is received  (NOT a reply)\n\t * @event   send        When a message will be sended\n\t * @event   reply       When a reply is received\n\t * @event   domready    When the DOM is ready\n\t * @event   handshake   When handshake is successful and ready\n\t * @event   ready       When both, the dom and the handshake, are successful and ready\n\t */\n\tvar CrossMessenger = (_temp = _class = function (_EventEmitter) {\n\t    _inherits(CrossMessenger, _EventEmitter);\n\t\n\t    function CrossMessenger() {\n\t        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : config,\n\t            targetFrame = _ref.targetFrame,\n\t            _ref$targetOrigin = _ref.targetOrigin,\n\t            targetOrigin = _ref$targetOrigin === undefined ? '*' : _ref$targetOrigin,\n\t            messageScope = _ref.messageScope,\n\t            messageHandler = _ref.messageHandler;\n\t\n\t        _classCallCheck(this, CrossMessenger);\n\t\n\t        var _this = _possibleConstructorReturn(this, (CrossMessenger.__proto__ || Object.getPrototypeOf(CrossMessenger)).call(this));\n\t\n\t        _initialiseProps.call(_this);\n\t\n\t        _this._validateConfigAndThrowOnError({ targetFrame: targetFrame, targetOrigin: targetOrigin, messageScope: messageScope, messageHandler: messageHandler });\n\t\n\t        // configureable\n\t        _this._targetFrame = targetFrame && 'contentWindow' in targetFrame ? targetFrame.contentWindow : targetFrame;\n\t        _this._targetOrigin = targetOrigin;\n\t        _this._messageScope = messageScope;\n\t        _this._messageHandler = messageHandler;\n\t\n\t        if (_typeof(_this._messageHandler) == 'object') {\n\t            _this._messageHandler = _this._messageHandler.handleMessage;\n\t        }\n\t\n\t        // protected\n\t        _this._waitingForReplyList = {};\n\t        _this._hasHandshake = false;\n\t        _this._isDomReady = false;\n\t\n\t        _this._isReady = new Promise(function (resolve, reject) {\n\t            _this._isReadyResolver = resolve;\n\t            _this._isReadyRejector = reject;\n\t        });\n\t\n\t        // start listening to incoming messages\n\t        window.addEventListener('message', _this._handleReceive);\n\t\n\t        // Is dom ready? If so, mark internal ready state as true, otherwise attach\n\t        // an event listener to the document to detect when dom is ready...\n\t        if (document.readyState === 'complete') {\n\t            setTimeout(_this._setDomSuccess.bind(_this));\n\t        } else {\n\t            document.addEventListener('DOMContentLoaded', _this._setDomSuccess);\n\t            window.addEventListener('load', _this._setDomSuccess);\n\t        }\n\t        return _this;\n\t    }\n\t\n\t    /**\n\t     * Public methods\n\t     */\n\t\n\t    /**\n\t     * reply\n\t     * @param messageOrId\n\t     * @param messageData   additional message data, will be merged with message\n\t     * @return {*}\n\t     */\n\t\n\t\n\t    _createClass(CrossMessenger, [{\n\t        key: 'reply',\n\t        value: function reply(messageOrId) {\n\t            var messageData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t            var baseMessage = (typeof messageOrId === 'undefined' ? 'undefined' : _typeof(messageOrId)) == 'object' ? messageOrId : { id: messageOrId },\n\t                message = Object.assign({}, baseMessage, messageData, { replyId: baseMessage.id });\n\t\n\t            return this.send(message);\n\t        }\n\t\n\t        /**\n\t         * send\n\t         * Message will only be send when both sides are ready to send and\n\t         * receive messages, or when \"force\" is true;\n\t         * @param message\n\t         * @param expectReply\n\t         * @param force         boolean     true to send even when system is not ready (used internally for handshake)\n\t         */\n\t\n\t    }, {\n\t        key: 'send',\n\t        value: function send(message) {\n\t            var _this2 = this;\n\t\n\t            var expectReply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\t            var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t            if (force) {\n\t                return this._send(message, expectReply);\n\t            } else {\n\t                return this._isReady.then(function () {\n\t                    return _this2._send(message, expectReply);\n\t                });\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Protected methods\n\t         */\n\t\n\t    }, {\n\t        key: '_validateConfigAndThrowOnError',\n\t        value: function _validateConfigAndThrowOnError(config) {\n\t            var required = ['targetFrame', 'targetOrigin', 'messageScope'];\n\t\n\t            required.forEach(function (property) {\n\t                if (!(property in config)) {\n\t                    throw new Error('Config property: \"' + property + '\" is required');\n\t                };\n\t            });\n\t\n\t            if (!config.targetFrame) {\n\t                throw new Error('Invalid target frame');\n\t            }\n\t\n\t            if (CrossMessenger._registeredMessageScopes.indexOf(config.messageScope) !== -1) {\n\t                throw new Error('Invalid message scope: ' + config.messageScope + ' is not unique');\n\t            }\n\t\n\t            if (config.messageHandler) {\n\t                if (_typeof(config.messageHandler) == 'object' && !('handleMessage' in config.messageHandler)) {\n\t                    throw new Error('Message handler object should contain a \"handleMessage\" function');\n\t                } else if (['object', 'function'].indexOf(_typeof(config.messageHandler)) === -1) {\n\t                    throw new Error('Message handler should be a function of an object with a \"handleMessage\" function...');\n\t                }\n\t            }\n\t        }\n\t\n\t        /**\n\t         * _send\n\t         * Unsafe send method. Will send message without taking into account if both sides\n\t         * are ready to send and receive messages.\n\t         * @param message\n\t         */\n\t\n\t    }, {\n\t        key: '_setReadyWhenReady',\n\t        value: function _setReadyWhenReady() {\n\t            if (this._hasHandshake && this._isDomReady) {\n\t                this._isReadyResolver();\n\t                this.emit('ready', this);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Event handler methods\n\t         */\n\t\n\t    }]);\n\t\n\t    return CrossMessenger;\n\t}(_eventemitter2.default), _class._idCounter = 0, _class._registeredMessageScopes = [], _initialiseProps = function _initialiseProps() {\n\t    var _this3 = this;\n\t\n\t    this._send = function (message) {\n\t        var expectReply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\t\n\t        var id = String(CrossMessenger._idCounter++);\n\t\n\t        var result = void 0,\n\t            serializedMessage = void 0;\n\t\n\t        if (expectReply) {\n\t            result = new Promise(function (resolve) {\n\t                _this3._waitingForReplyList[id] = resolve;\n\t            });\n\t        } else {\n\t            result = Promise.resolve();\n\t        }\n\t\n\t        message.id = id;\n\t        message.messageScope = _this3._messageScope;\n\t        message.expectReply = expectReply;\n\t\n\t        try {\n\t            serializedMessage = JSON.stringify(message);\n\t            _this3.emit('send', message);\n\t            _this3._targetFrame.postMessage(serializedMessage, _this3._targetOrigin);\n\t        } catch (error) {\n\t            throw new Error('Could not serialize message: ' + error);\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    this._setHandshakeSuccess = function () {\n\t        if (!_this3._hasHandshake) {\n\t            _this3._hasHandshake = true;\n\t            _this3.emit('handshake', _this3);\n\t            _this3._setReadyWhenReady();\n\t        }\n\t    };\n\t\n\t    this._setDomSuccess = function () {\n\t        if (!_this3._isDomReady) {\n\t            _this3._isDomReady = true;\n\t\n\t            _this3.emit('domready', _this3);\n\t            _this3._setReadyWhenReady();\n\t\n\t            if (!_this3._hasHandshake) {\n\t                _this3.send({ name: '_handshake' }, false, true);\n\t            }\n\t        }\n\t    };\n\t\n\t    this._handleReceive = function (postMessage) {\n\t        var message = void 0;\n\t\n\t        try {\n\t            message = JSON.parse(postMessage.data);\n\t        } catch (error) {\n\t            // Could not parse message. Message is invalid, so ignore...\n\t            return;\n\t        }\n\t\n\t        var _message = message,\n\t            id = _message.id,\n\t            messageScope = _message.messageScope,\n\t            name = _message.name,\n\t            expectReply = _message.expectReply,\n\t            replyId = _message.replyId,\n\t            isValidMessage = messageScope === _this3._messageScope && !!id,\n\t            isHandshake = isValidMessage && name === '_handshake',\n\t            isReply = !!replyId;\n\t\n\t        // when the message is not a reply but is a _handshake, confirm\n\t        // the handshake by replying.\n\t\n\t        if (isValidMessage && isHandshake && id) {\n\t            if (!isReply) {\n\t                _this3.reply(message, true);\n\t            }\n\t\n\t            setTimeout(_this3._setHandshakeSuccess.bind(_this3));\n\t        }\n\t\n\t        // Not a CrossMessenger message or not a message for this instance...\n\t        if (!isValidMessage) {\n\t            return;\n\t        }\n\t\n\t        var isValidReply = replyId in _this3._waitingForReplyList,\n\t            replyResolver = isValidReply ? _this3._waitingForReplyList[replyId] : null;\n\t\n\t        _this3.emit('receive', message, _this3);\n\t\n\t        if (isValidReply) {\n\t            replyResolver(message);\n\t            delete _this3._waitingForReplyList[replyId];\n\t            _this3.emit('reply', message, _this3);\n\t        } else {\n\t            if (expectReply) {\n\t                var replyPayload = null,\n\t                    success = true,\n\t                    error = null;\n\t\n\t                if (_this3._messageHandler) {\n\t                    try {\n\t                        replyPayload = _this3._messageHandler(message, _this3);\n\t                    } catch (error) {\n\t                        error = error.getMessage();\n\t                        success = false;\n\t                    }\n\t                }\n\t\n\t                _this3.reply(_extends({}, message, {\n\t                    payload: replyPayload,\n\t                    success: success,\n\t                    error: error\n\t                }));\n\t            } else if (_this3._messageHandler) {\n\t                _this3._messageHandler(message, _this3);\n\t            }\n\t\n\t            _this3.emit('message', message, _this3);\n\t        }\n\t    };\n\t}, _temp);\n\t\n\t\n\tmodule.exports = CrossMessenger;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar has = Object.prototype.hasOwnProperty\n\t  , prefix = '~';\n\t\n\t/**\n\t * Constructor to create a storage for our `EE` objects.\n\t * An `Events` instance is a plain object whose properties are event names.\n\t *\n\t * @constructor\n\t * @api private\n\t */\n\tfunction Events() {}\n\t\n\t//\n\t// We try to not inherit from `Object.prototype`. In some engines creating an\n\t// instance in this way is faster than calling `Object.create(null)` directly.\n\t// If `Object.create(null)` is not supported we prefix the event names with a\n\t// character to make sure that the built-in object properties are not\n\t// overridden or used as an attack vector.\n\t//\n\tif (Object.create) {\n\t  Events.prototype = Object.create(null);\n\t\n\t  //\n\t  // This hack is needed because the `__proto__` property is still inherited in\n\t  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n\t  //\n\t  if (!new Events().__proto__) prefix = false;\n\t}\n\t\n\t/**\n\t * Representation of a single event listener.\n\t *\n\t * @param {Function} fn The listener function.\n\t * @param {Mixed} context The context to invoke the listener with.\n\t * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n\t * @constructor\n\t * @api private\n\t */\n\tfunction EE(fn, context, once) {\n\t  this.fn = fn;\n\t  this.context = context;\n\t  this.once = once || false;\n\t}\n\t\n\t/**\n\t * Minimal `EventEmitter` interface that is molded against the Node.js\n\t * `EventEmitter` interface.\n\t *\n\t * @constructor\n\t * @api public\n\t */\n\tfunction EventEmitter() {\n\t  this._events = new Events();\n\t  this._eventsCount = 0;\n\t}\n\t\n\t/**\n\t * Return an array listing the events for which the emitter has registered\n\t * listeners.\n\t *\n\t * @returns {Array}\n\t * @api public\n\t */\n\tEventEmitter.prototype.eventNames = function eventNames() {\n\t  var names = []\n\t    , events\n\t    , name;\n\t\n\t  if (this._eventsCount === 0) return names;\n\t\n\t  for (name in (events = this._events)) {\n\t    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n\t  }\n\t\n\t  if (Object.getOwnPropertySymbols) {\n\t    return names.concat(Object.getOwnPropertySymbols(events));\n\t  }\n\t\n\t  return names;\n\t};\n\t\n\t/**\n\t * Return the listeners registered for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Boolean} exists Only check if there are listeners.\n\t * @returns {Array|Boolean}\n\t * @api public\n\t */\n\tEventEmitter.prototype.listeners = function listeners(event, exists) {\n\t  var evt = prefix ? prefix + event : event\n\t    , available = this._events[evt];\n\t\n\t  if (exists) return !!available;\n\t  if (!available) return [];\n\t  if (available.fn) return [available.fn];\n\t\n\t  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n\t    ee[i] = available[i].fn;\n\t  }\n\t\n\t  return ee;\n\t};\n\t\n\t/**\n\t * Calls each of the listeners registered for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @returns {Boolean} `true` if the event had listeners, else `false`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n\t  var evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events[evt]) return false;\n\t\n\t  var listeners = this._events[evt]\n\t    , len = arguments.length\n\t    , args\n\t    , i;\n\t\n\t  if (listeners.fn) {\n\t    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\t\n\t    switch (len) {\n\t      case 1: return listeners.fn.call(listeners.context), true;\n\t      case 2: return listeners.fn.call(listeners.context, a1), true;\n\t      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n\t      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n\t      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n\t      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n\t    }\n\t\n\t    for (i = 1, args = new Array(len -1); i < len; i++) {\n\t      args[i - 1] = arguments[i];\n\t    }\n\t\n\t    listeners.fn.apply(listeners.context, args);\n\t  } else {\n\t    var length = listeners.length\n\t      , j;\n\t\n\t    for (i = 0; i < length; i++) {\n\t      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\t\n\t      switch (len) {\n\t        case 1: listeners[i].fn.call(listeners[i].context); break;\n\t        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n\t        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n\t        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n\t        default:\n\t          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n\t            args[j - 1] = arguments[j];\n\t          }\n\t\n\t          listeners[i].fn.apply(listeners[i].context, args);\n\t      }\n\t    }\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\t/**\n\t * Add a listener for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Function} fn The listener function.\n\t * @param {Mixed} [context=this] The context to invoke the listener with.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.on = function on(event, fn, context) {\n\t  var listener = new EE(fn, context || this)\n\t    , evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n\t  else if (!this._events[evt].fn) this._events[evt].push(listener);\n\t  else this._events[evt] = [this._events[evt], listener];\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Add a one-time listener for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Function} fn The listener function.\n\t * @param {Mixed} [context=this] The context to invoke the listener with.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.once = function once(event, fn, context) {\n\t  var listener = new EE(fn, context || this, true)\n\t    , evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n\t  else if (!this._events[evt].fn) this._events[evt].push(listener);\n\t  else this._events[evt] = [this._events[evt], listener];\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Remove the listeners of a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Function} fn Only remove the listeners that match this function.\n\t * @param {Mixed} context Only remove the listeners that have this context.\n\t * @param {Boolean} once Only remove one-time listeners.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n\t  var evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events[evt]) return this;\n\t  if (!fn) {\n\t    if (--this._eventsCount === 0) this._events = new Events();\n\t    else delete this._events[evt];\n\t    return this;\n\t  }\n\t\n\t  var listeners = this._events[evt];\n\t\n\t  if (listeners.fn) {\n\t    if (\n\t         listeners.fn === fn\n\t      && (!once || listeners.once)\n\t      && (!context || listeners.context === context)\n\t    ) {\n\t      if (--this._eventsCount === 0) this._events = new Events();\n\t      else delete this._events[evt];\n\t    }\n\t  } else {\n\t    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n\t      if (\n\t           listeners[i].fn !== fn\n\t        || (once && !listeners[i].once)\n\t        || (context && listeners[i].context !== context)\n\t      ) {\n\t        events.push(listeners[i]);\n\t      }\n\t    }\n\t\n\t    //\n\t    // Reset the array, or remove it completely if we have no more listeners.\n\t    //\n\t    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n\t    else if (--this._eventsCount === 0) this._events = new Events();\n\t    else delete this._events[evt];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Remove all listeners, or those of the specified event.\n\t *\n\t * @param {String|Symbol} [event] The event name.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n\t  var evt;\n\t\n\t  if (event) {\n\t    evt = prefix ? prefix + event : event;\n\t    if (this._events[evt]) {\n\t      if (--this._eventsCount === 0) this._events = new Events();\n\t      else delete this._events[evt];\n\t    }\n\t  } else {\n\t    this._events = new Events();\n\t    this._eventsCount = 0;\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t//\n\t// Alias methods names because people roll like that.\n\t//\n\tEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\tEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t//\n\t// This function doesn't apply anymore.\n\t//\n\tEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n\t  return this;\n\t};\n\t\n\t//\n\t// Expose the prefix.\n\t//\n\tEventEmitter.prefixed = prefix;\n\t\n\t//\n\t// Allow `EventEmitter` to be imported as module namespace.\n\t//\n\tEventEmitter.EventEmitter = EventEmitter;\n\t\n\t//\n\t// Expose the module.\n\t//\n\tif (true) {\n\t  module.exports = EventEmitter;\n\t}\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// CrossMessenger.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 188be289bbebe91dbe66","module.exports = require('./lib/CrossMessenger');\n\n\n// WEBPACK FOOTER //\n// ./index.js","'use strict';\n\nimport EventEmitter from 'eventemitter3'\n\n/*\nFeatures:\n - Queuing of messages when messenger is not ready. (The send method will send when to ready promise is resolved.)\n - Reply messages (useful to return data or to let the sender know that a message is processed)\n - Promises - when sending a message a promise will be returned\n - Auto serialize/unserialize messages\n - Message scopes to only process messages from the configured scope\n - Auto handshake to detect and confirm when both messenger sides are ready to send and receive messages\n */\n\n/**\n * CrossMessenger\n * Messenger to communicate between frames through postMessage. Messages can be replied to confirm processing or to return\n * data. Use the custom messageHandler to control the return value.\n * When sending a message, a Promise will be the return value. When the optional param \"expectReply\" is true, the Promise will be resolved after the\n * other side has replied the message with the reply message object as the argument. When false, the Promise will be resolved instantly.\n *\n * @param   config.targetFrame          Ref to the target element (iframe or window.parent (when in iframe)). The target element should support postMessage.\n * @param   config.targetOrigin         Default *\n * @param   config.messageScope         Scope of messages to accept. Messages from other scopes will be ignored. The scope of the sender and receiver should be equal.\n * @param   config.messageHandler       A class or object with a \"handleMessage\" function or a function. Params: message and messenger. The return value of the messageHandler will be used as the reply payload...\n *\n * @event   receive     When a message or a reply is received\n * @event   message     When a message is received  (NOT a reply)\n * @event   send        When a message will be sended\n * @event   reply       When a reply is received\n * @event   domready    When the DOM is ready\n * @event   handshake   When handshake is successful and ready\n * @event   ready       When both, the dom and the handshake, are successful and ready\n */\nclass CrossMessenger extends EventEmitter {\n    static _idCounter = 0;\n\n    static _registeredMessageScopes = [];\n\n    constructor({targetFrame, targetOrigin = '*', messageScope, messageHandler } = config) {\n        super();\n\n        this._validateConfigAndThrowOnError({targetFrame, targetOrigin, messageScope, messageHandler});\n\n        // configureable\n        this._targetFrame = (targetFrame && 'contentWindow' in targetFrame) ? targetFrame.contentWindow : targetFrame\n        this._targetOrigin = targetOrigin;\n        this._messageScope = messageScope;\n        this._messageHandler = messageHandler;\n\n        if (typeof this._messageHandler == 'object') {\n            this._messageHandler = this._messageHandler.handleMessage;\n        }\n\n        // protected\n        this._waitingForReplyList = {};\n        this._hasHandshake = false;\n        this._isDomReady = false;\n\n        this._isReady = new Promise((resolve, reject) => {\n            this._isReadyResolver = resolve;\n            this._isReadyRejector = reject;\n        });\n\n        // start listening to incoming messages\n        window.addEventListener('message', this._handleReceive);\n\n        // Is dom ready? If so, mark internal ready state as true, otherwise attach\n        // an event listener to the document to detect when dom is ready...\n        if (document.readyState === 'complete') {\n            setTimeout(this._setDomSuccess.bind(this));\n        } else {\n            document.addEventListener('DOMContentLoaded', this._setDomSuccess);\n            window.addEventListener('load', this._setDomSuccess);\n        }\n    }\n\n    /**\n     * Public methods\n     */\n\n    /**\n     * reply\n     * @param messageOrId\n     * @param messageData   additional message data, will be merged with message\n     * @return {*}\n     */\n    reply(messageOrId, messageData = {}) {\n        const baseMessage = (typeof messageOrId == 'object') ? messageOrId : { id: messageOrId },\n              message = Object.assign({}, baseMessage, messageData, { replyId: baseMessage.id });\n\n        return this.send(message);\n    }\n\n    /**\n     * send\n     * Message will only be send when both sides are ready to send and\n     * receive messages, or when \"force\" is true;\n     * @param message\n     * @param expectReply\n     * @param force         boolean     true to send even when system is not ready (used internally for handshake)\n     */\n    send(message, expectReply = false, force = false) {\n        if (force) {\n            return this._send(message, expectReply);\n        } else {\n            return this._isReady.then(() => this._send(message, expectReply));\n        }\n    }\n\n    /**\n     * Protected methods\n     */\n\n    _validateConfigAndThrowOnError(config) {\n        const required = ['targetFrame', 'targetOrigin', 'messageScope'];\n\n        required.forEach((property) => {\n            if (!(property in config)) {\n                throw new Error(`Config property: \"${property}\" is required`);\n            };\n        });\n\n        if (!config.targetFrame) {\n            throw new Error('Invalid target frame');\n        }\n\n        if (CrossMessenger._registeredMessageScopes.indexOf(config.messageScope) !== -1) {\n            throw new Error(`Invalid message scope: ${config.messageScope} is not unique`);\n        }\n\n        if (config.messageHandler) {\n            if (typeof config.messageHandler == 'object' && !('handleMessage' in config.messageHandler)) {\n                throw new Error('Message handler object should contain a \"handleMessage\" function');\n            } else if(['object', 'function'].indexOf(typeof config.messageHandler) === -1) {\n                throw new Error('Message handler should be a function of an object with a \"handleMessage\" function...');\n            }\n        }\n    }\n\n    /**\n     * _send\n     * Unsafe send method. Will send message without taking into account if both sides\n     * are ready to send and receive messages.\n     * @param message\n     */\n    _send = (message, expectReply = false) => {\n        const id = String(CrossMessenger._idCounter++);\n\n        let result,\n            serializedMessage;\n\n        if (expectReply) {\n            result = new Promise((resolve) => {\n                this._waitingForReplyList[id] = resolve;\n            });\n        } else {\n            result = Promise.resolve();\n        }\n\n        message.id = id;\n        message.messageScope = this._messageScope;\n        message.expectReply = expectReply;\n\n        try {\n            serializedMessage = JSON.stringify(message);\n            this.emit('send', message);\n            this._targetFrame.postMessage(serializedMessage, this._targetOrigin);\n        } catch(error) {\n            throw new Error('Could not serialize message: ' + error);\n        }\n\n        return result;\n    }\n\n    _setHandshakeSuccess = () => {\n        if (!this._hasHandshake) {\n            this._hasHandshake = true;\n            this.emit('handshake', this);\n            this._setReadyWhenReady();\n\n        }\n    }\n\n    _setDomSuccess = () => {\n        if (!this._isDomReady) {\n            this._isDomReady = true;\n\n            this.emit('domready', this);\n            this._setReadyWhenReady();\n\n            if (!this._hasHandshake) {\n                this.send({ name: '_handshake' }, false, true);\n            }\n        }\n    }\n\n    _setReadyWhenReady() {\n        if (this._hasHandshake && this._isDomReady) {\n            this._isReadyResolver();\n            this.emit('ready', this);\n        }\n    }\n\n    /**\n     * Event handler methods\n     */\n\n    _handleReceive = (postMessage) => {\n        let message;\n\n        try {\n            message = JSON.parse(postMessage.data);\n        } catch(error) {\n            // Could not parse message. Message is invalid, so ignore...\n            return;\n        }\n\n        const {id, messageScope, name, expectReply, replyId} = message,\n              isValidMessage = (messageScope === this._messageScope && !!id),\n              isHandshake = (isValidMessage && name === '_handshake'),\n              isReply = !!replyId;\n\n        // when the message is not a reply but is a _handshake, confirm\n        // the handshake by replying.\n        if (isValidMessage && isHandshake && id) {\n            if (!isReply) {\n                this.reply(message, true);\n            }\n\n            setTimeout(this._setHandshakeSuccess.bind(this));\n        }\n\n        // Not a CrossMessenger message or not a message for this instance...\n        if (!isValidMessage) {\n            return;\n        }\n\n        const isValidReply = replyId in this._waitingForReplyList,\n              replyResolver = isValidReply ? this._waitingForReplyList[replyId] : null;\n\n        this.emit('receive', message, this);\n\n        if (isValidReply) {\n            replyResolver(message);\n            delete this._waitingForReplyList[replyId];\n            this.emit('reply', message, this);\n        } else {\n            if (expectReply) {\n                let replyPayload =  null,\n                    success = true,\n                    error = null;\n\n                if (this._messageHandler) {\n                    try {\n                        replyPayload = this._messageHandler(message, this);\n                    } catch(error) {\n                        error = error.getMessage();\n                        success = false;\n                    }\n                }\n\n                this.reply({\n                    ...message,\n                    payload: replyPayload,\n                    success,\n                    error\n                });\n            } else if(this._messageHandler) {\n                this._messageHandler(message, this);\n            }\n\n            this.emit('message', message, this);\n        }\n    }\n}\n\nmodule.exports = CrossMessenger;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/CrossMessenger.js","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @api private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {Mixed} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Boolean} exists Only check if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {Mixed} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n         listeners.fn === fn\n      && (!once || listeners.once)\n      && (!context || listeners.context === context)\n    ) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n           listeners[i].fn !== fn\n        || (once && !listeners[i].once)\n        || (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {String|Symbol} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/eventemitter3/index.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}